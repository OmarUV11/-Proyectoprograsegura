from django.http import HttpResponse, JsonResponse
from django.template import Template, Context
from django.shortcuts import render, redirect
from django.conf import settings
from modelo import models
from datetime import timezone
import pruebas.settings as conf
import datetime
import subprocess
import requests
import loggin, platform


logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s',
                    datefmt='%d-%b-%y %H:%M:%S', level=logging.INFO,
                    filename='resgistros.log', filemode='a')

def verificar_scripts(request):
  t = 'SubirEjercicios.html'
  Entrada = request.POST.get('Entrada','')
  Salida_esperada =  request.POST.get('Salida_esperada','')
  Comando = ['/home/omarconde/hola.sh',Entrada]
  salida = subprocess.Popen(Comando,stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  stdout, stderr = salida.communicate()
  print(stdout, stderr)
  if Salida_esperada == stdout.decode('utf-8').strip():
     print("Ejercicio Correcto")
  else:
     print("Ejercicio Incorrecto")
  return render(request,t)

def login(request):
    logueado = request.session.get('logueado', False)
    bot_token = '5315329935:AAHP7VKlHsDgm5WICx6C5jUg4TmIXxTflTI'
    if request.method == 'GET':
       t = 'login.html'
       return render(request,t,{'logueado': logueado})
    elif request.method == 'POST':
        nombre = request.POST.get('nombres','')
        contraseña =  request.POST.get('password','')
        bot_chatID = request.POST.get('Chat_id','')
        id_Chat = verificar_id_chat(bot_chatID)
        if puede_hacer_peticion(get_client_ip(request)): 
            try:
                  usurio = models.Usuario.objects.get(nombre=nombre,contraseña=contraseña)
                  request.session['logueado']= True
                  request.session['nombre'] = nombre
                  bot_message = 'Acaba de iniciar session' +' '+ usurio.nombre
                  if  request.session['logueado'] == True:
                      send_text = 'https://api.telegram.org/bot' + bot_token + '/sendMessage?chat_id=' + bot_chatID + '&parse_mode=Markdown&text=' + bot_message
                      response = requests.get(send_text)
                  return redirect('/verificar_scripts')
            except:
                  return redirect('/login')
        else:
             print("Se teminarion lo intentos")
             return redirect('/login')
  


def Registro_Alumnos(request):
    t = 'Registro_Alumnos.html';
    if request.method == 'GET':
       return render(request,t,{})
    elif request.method == 'POST':
       nombre = request.POST.get('nombreAlumno','')
       matricula = request.POST.get('Matricula','')
       contrasena =  request.POST.get('Contrasena','').strip()
       Tipocuenta = request.POST.get('TipoCuenta','')
       alumno =  models.Alumnos(NombreAlumno=nombre,Matricula=matricula,Contraseña=contrasena,Tipocuenta=Tipocuenta)
       alumno.save()
       return redirect('/login')

def get_client_ip(request):
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR')
    return ip

def es_ip_conocida(ip: str):
    registros = models.Usuario.objects.filter(ip=ip)
    return len(registros) != 0


def guardar_peticion(ip: str, intentos: int):
    fecha_actual = datetime.datetime.now()
    if not es_ip_conocida(ip):
        entrada = models.Usuario(ip=ip, intentos=1,timestamp=fecha_actual)
        entrada.save()
        return
    registro = models.Usuario.objects.get(ip=ip)
    registro.intentos = intentos
    registro.timestamp = fecha_actual
    registro.save()
   
def esta_tiempo_en_ventana(timestamp):
    momento_actual = datetime.datetime.now(timezone.utc)
    resta = momento_actual - timestamp
    if resta.seconds < conf.VENTANA_SEGUNDOS_INTENTOS_PETICION:
        return True
    return False

def puede_hacer_peticion(ip):
    """
    Verdadero si la IP no ha alcanzado el límite de intentos.

    Keyword Arguments:
    ip --
    returns: Bool
    """
    if not es_ip_conocida(ip):
        guardar_peticion(ip, 1)
        return True
    registro = models.Usuario.objects.get(ip=ip)
    if not esta_tiempo_en_ventana(registro.timestamp):
        guardar_peticion(ip, 1)
        return True
    else:
        if (registro.intentos + 1) > conf.INTENTOS_MAXIMOS_PETICION:
            guardar_peticion(ip, registro.intentos + 1)
            return False
        else:
            guardar_peticion(ip, registro.intentos + 1)
            return True
